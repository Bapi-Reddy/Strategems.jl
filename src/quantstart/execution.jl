#=
Implementation of the QuantStart event-driven backtester's execution methods.

See here: https://www.quantstart.com/articles/Event-Driven-Backtesting-with-Python-Part-vi
=#

using Base.Dates

@doc """
The ExecutionHandler abstract type handles the interaction between a set of order objects generated by a Portfolio and the ultimate set of Fill objects that actually occur in the market.

The handlers can be used to subtype simulated brokerages or live brokerages, with identical interfaces. This allows strategies to be backtested in a very similar manner to the live trading engine.
""" ->
abstract ExecutionHandler


@doc """
Simply converts all order objects into their equivalent fill objects automatically without latency, slippage, of fill-ratio issues.

This allows a straightforward 'first go' test of any strategy, before implementation with a more sophisticated execution handler.
""" ->
type SimulatedExecutionHandler <: ExecutionHandler
    events::EventQueue
end


@doc doc"""
execute_order(eh::ExecutionHandler, order::OrderEvent)

Takes an Order event and executes it, producing a Fill event that gets placed into the events queue.
""" ->
function execute_order(eh::SimulatedExecutionHandler, event::OrderEvent)
    #TODO: implement append! method for EventQueue type
    append!(eh.events, FillEvent(event.ticker, now(), "ARCA", event.qty, event.dir, 0.0))
end
